; =======================================================================
;
Pro sm_make_tc_distance_eu_vegetation_m, daysNumber, data_in, idx_doIt, day, meandat, std_mean, nfield, index_2, dims
  ;
  ;
  ; data_in : daily data (at least 3 days contain valid value)
  ; index : number of observation
  ; idx_doIt : position where index ge 3
  ;
  ;
  ; nfield : 3 over vegetation pixels
  ; nfield : 2 over bare soil
  ;
  ; output:
  ; day : the day to be used in the time composite
  ; index_2 : number of observation after outliers
  ;
  ; meandat : temporal deviation over the period (only valid pixels after outliers)
  ;
  ; compute the distance
  ;
  ;
  ;
  sm_FindEuclideanMatricDistance, daysNumber, data_in, idx_doIt, distance, meandat, std_mean, nfield, dims
  ;
  ;
  ;
  ;window,11, xsize=720*2, ysize=360*2, title='Mean fapar after'
  ;faparcolor
  ;img=bytarr(7200,3600)
  ;img(*,*)=meandat(2,*,*)*250.0
  ;tvscl, reverse(congrid(img,720*2,360*2),2)
  ;
  ;
  ; remove outliers ; check the numbers
  ;
  if nfield eq 3 then thres = 7.915
  if nfield eq 2 then thres = 5.991
  ;
  ;=================================================================
  ;
  ; re-compute number of days
  ;
  ;========================================================================
  index_2=bytarr(dims[0],dims[1])
  buf=fltarr(dims[0],dims[1])
  index_2(*,*)=0.
  one=index_2
  one(*,*)=1.
  ;tt=size(data_in.day)
  tt=[0, daysNumber]
  for t=0, tt(1)-1 do begin
    buf(*,*)=-1.0
    buf(idx_doIt)=distance(t,*)
    ; MM & NG 22/09/2016
    idx_mask = where(buf le thres and buf ge 0.0)
    if idx_mask(0) ge 0 then index_2(idx_doIt(idx_mask))=index_2(idx_doIt(idx_mask))+one(idx_doIt(idx_mask))
    idx_bad_mask = where(buf gt thres and buf ge 0.0)
    if idx_bad_mask(0) ge 0 then data_in(t).flag(idx_doIt(idx_bad_mask))=11.0
  endfor
  ;

  if nfield eq 3 then idx_remake=where(data_in.flag eq 0.0 and index_2 ge 3)
  if nfield eq 2 then idx_remake=where((data_in.flag eq 4.0 or data_in.flag eq 5.0) and index_2 ge 3)
  ;
  if idx_remake(0) ge 0 then begin
    print, 'Remake after Outliers out'
    sm_FindEuclideanMatricDistance, daysNumber, data_in, idx_remake, distance_2, meandat2, std_mean2, nfield, dims

    distance(*,idx_remake)=distance_2
    meandat(*,idx_remake)=meandat2(*,idx_remake)
    ;std_mean(*,idx_remake)=std_mean2(*,idx_remake)
    ; MM 22/9/2016
    std_mean.red[idx_remake]=std_mean2.red[idx_remake]
    std_mean.nir[idx_remake]=std_mean2.nir[idx_remake]
    std_mean.temp[idx_remake]=std_mean2.temp[idx_remake]
  endif
  ;
  ;
  ;window,12, xsize=720*2, ysize=360*2, title='mean fapar after outliers out'
  ;faparcolor
  img=bytarr(dims[0],dims[1])
  if nfield eq 3 then img(*,*)=meandat(2,*,*)*250.0
  if nfield eq 2 then img(*,*)=meandat(0,*,*)*250.0
  ;tvscl, reverse(congrid(img,720*2,360*2),2)
  ;tvscl, congrid(img,720*2,360*2)
  ;
  ; look for day of minimum distance
  ;
  day=bytarr(dims[0],dims[1])
  day(*,*)=255
  min_val=fltarr(dims[0],dims[1])
  buf=fltarr(dims[0],dims[1])
  ;
  ; take the first as minimum value
  ;
  min_val(*,*)=10000.0
  ;
  ;
  for t=0, tt(1)-1 do begin
    buf(*,*) = 11000.0
    buf(idx_doIt)=distance(t,*)
    idx_mask = where(buf(*,*) lt min_val(*,*))
    if idx_mask(0) ge 0 then begin
      min_val(idx_mask)=buf(idx_mask)
      day(idx_mask)=t
    endif
  endfor
  ;
  ;stop
  print,'find minimum distance day ...'
  ;
END
;
;
PRO sm_call_composite, daysNumber, data_day_f, data_tc, nSlice
  ;
  ;
  ;
  ; data_day = products for each day and each pixels
  ;
  ; data_tc = time-composite results
  ;
  ; to check MM
  validIdx=where(data_day_f.fname ne '', count)
  data_day_t=data_day_f[validIdx]
  daysNumber=count
  print, 'In the time composite program ...'
  ;
  ;tt=size(data_day.day)
  tt=[0, daysNumber]
  ;
  ;
  data_tc= {Composite, day: bytarr(7200,3600), $
    nday: bytarr(7200,3600), $
    fapar: fltarr(7200,3600), $
    dev_temp: fltarr(7200,3600), $
    sigma: fltarr(7200,3600), $
    red: fltarr(7200,3600), $
    dev_red_temp: fltarr(7200,3600), $
    sigma_red:fltarr(7200,3600), $
    nir: fltarr(7200,3600), $
    dev_nir_temp: fltarr(7200,3600), $
    sigma_nir: fltarr(7200,3600), $
    flag: bytarr(7200,3600), $
    toc_red: fltarr(7200,3600), $
    toc_nir: fltarr(7200,3600), $
    qa: bytarr(7200,3600)}
  ;
  ; initiate flag to sea mask
  ; MM & NC 22/09/2016 flagging water
  ;data_tc.flag(*,*)=6
  data_tc.flag(*,*)=3
  ;
  ;==========================================================================================
  ;
  ; look for vegetated pixels
  ;
  ; count the number of dates where we have valid pixels over vegetation land
  ;
  ;
  xSplitDim=7200/nSlice
  ySplitDim=3600; full dim,

  tt=[0, daysNumber]

  for slice=0, nSlice-1 do begin

    subXStart=slice*xSplitDim & subXEnd=(slice+1)*xSplitDim-1
    subYStart=0 & subYEnd=3600-1

    ; initialize this slice (overwriting previous...)
    data_day_split={  day: bytarr(xSplitDim,ySplitDim), $
      ;nday: bytarr(xSplitDim,ySplitDim), $
      fapar: fltarr(xSplitDim,ySplitDim), $
      ;dev_temp: fltarr(xSplitDim,ySplitDim), $
      sigma: fltarr(xSplitDim,ySplitDim), $
      red: fltarr(xSplitDim,ySplitDim), $
      ;dev_red_temp: fltarr(xSplitDim,ySplitDim), $
      sigma_red:fltarr(xSplitDim,ySplitDim), $
      nir: fltarr(xSplitDim,ySplitDim), $
      ;dev_nir_temp: fltarr(xSplitDim,ySplitDim), $
      sigma_nir: fltarr(xSplitDim,ySplitDim), $
      flag: bytarr(xSplitDim,ySplitDim), $
      toc_red: fltarr(xSplitDim,ySplitDim), $
      toc_nir: fltarr(xSplitDim,ySplitDim), $
      qa: bytarr(xSplitDim,ySplitDim), valid:0}

    data_tc_split={  day: bytarr(xSplitDim,ySplitDim), $
      nday: bytarr(xSplitDim,ySplitDim), $
      fapar: fltarr(xSplitDim,ySplitDim), $
      dev_temp: fltarr(xSplitDim,ySplitDim), $
      sigma: fltarr(xSplitDim,ySplitDim), $
      red: fltarr(xSplitDim,ySplitDim), $
      dev_red_temp: fltarr(xSplitDim,ySplitDim), $
      sigma_red:fltarr(xSplitDim,ySplitDim), $
      nir: fltarr(xSplitDim,ySplitDim), $
      dev_nir_temp: fltarr(xSplitDim,ySplitDim), $
      sigma_nir: fltarr(xSplitDim,ySplitDim), $
      flag: bytarr(xSplitDim,ySplitDim), $
      toc_red: fltarr(xSplitDim,ySplitDim), $
      toc_nir: fltarr(xSplitDim,ySplitDim), $
      qa: bytarr(xSplitDim,ySplitDim), valid:0}

    data_day_split=replicate(data_day_split, daysNumber)

    for t=0, tt[1]-1 do begin
      ;restore, data_day_f[t].data_file
      if data_day_f[t].fid gt 0 then faparData=read_AVHRR_FAPAR_1(data_day_f[t].fDir, data_day_f[t].fName, FOUND=FOUND, /APPLY, offset=[subXStart, 0], count=[xSplitDim, ySplitDim], fid=data_day_f[t].fid) $
      else faparData=read_AVHRR_FAPAR_1(data_day_f[t].fDir, data_day_f[t].fName, FOUND=FOUND, /APPLY, offset=[subXStart, 0], count=[xSplitDim, ySplitDim], fid=fid)
      ;if fid ne -1 then data_day_f[t].fid=fid
      print, 'reading day...', t+1, '/', tt[1]
      data_day_split[t].valid=0
      if keyword_set(FOUND) then begin
        data_day_split[t].fapar=faparData.fapar
        data_day_split[t].red=faparData.red
        data_day_split[t].nir=faparData.nir
        data_day_split[t].flag=faparData.flag
        data_day_split[t].valid=1
      endif
    endfor

    vIdxs=where(data_day_split.valid eq 1, dNumber)
    daysNumber=dNumber
    data_day_split=data_day_split[vIdxs]
    tt=[0, daysNumber]

    index=bytarr(xSplitDim,ySplitDim)
    index(*,*)=0
    one=index
    one(*,*)=1
    for t=0, tt(1)-1 do begin
      idx_mask = where(data_day_split(t).flag(*,*) eq 0.0 and data_day_split(t).fapar(*,*) gt 0.0 and $
        data_day_split(t).red(*,*) gt 0.0 and data_day_split(t).red(*,*) lt 1.0 and $
        data_day_split(t).nir(*,*) gt 0.0 and data_day_split(t).nir(*,*) lt 1.0)
      if idx_mask(0) ge 0 then index(idx_mask)=index(idx_mask)+one(idx_mask)
    endfor
    ;==========================================================================================
    ;loadct,12
    ;window,0, xsize=720, ysize=360, title='Number of day over vegetation'
    ;tvscl, reverse(congrid(index,720,360),2)
    ;
    ;
    ; More than two dates
    ;
    ; associated values for the number of date is bigger or equal to 3
    ;
    idx_third = where(index ge 3)
    ;
    dims = SIZE(index, /DIMENSIONS)
    ind = ARRAY_INDICES(dims, idx_third, /DIMENSIONS)
    ;
    ;
    sm_make_tc_distance_eu_vegetation_m, daysNumber, data_day_split, idx_third, day, meandat, std_mean, 3, index_2, [xSplitDim, ySplitDim]
    ;
    ;stop
    ;
    ;
    ; to check if follow is ok
    ;
    ;for t=0, tt(1)-1 do data_day_split(t).fapar=meandat(2,*,*)
    ;
    for t =0 , tt(1) -1 do begin
      ;idx_t=where(day eq float(t) and index ge 3)
      ; MM & NG 22/09/2016
      ;idx_t=where(day eq t and index ge 3 and index_2 ge 3)
      ;last!!!
      idx_t=where(day eq t and index_2 ge 3)

      if idx_t(0) ge 0 then begin
        data_tc_split.red(idx_t)= data_day_split(t).red(idx_t)
        data_tc_split.nir(idx_t)= data_day_split(t).nir(idx_t)
        data_tc_split.fapar(idx_t)= data_day_split(t).fapar(idx_t)
        ;
        data_tc_split.sigma_red(idx_t)= data_day_split(t).sigma_red(idx_t)
        data_tc_split.sigma_nir(idx_t)= data_day_split(t).sigma_nir(idx_t)
        data_tc_split.sigma(idx_t)= data_day_split(t).sigma(idx_t)
        ;
        data_tc_split.flag(idx_t)= data_day_split(t).flag(idx_t)
        data_tc_split.day(idx_t) = day(idx_t)
        ; MM & NG 22/9/2016
        data_tc_split.dev_red_temp(idx_t)= std_mean.red[idx_t]
        data_tc_split.dev_nir_temp(idx_t)= std_mean.nir[idx_t]
        data_tc_split.dev_temp(idx_t)= std_mean.temp[idx_t]
        ;data_tc_split.dev_red_temp(idx_t)= std_mean(0,idx_t)
        ;data_tc_split.dev_nir_temp(idx_t)= std_mean(1,idx_t)
        ;data_tc_split.dev_temp(idx_t)= std_mean(2,idx_t)
      endif
      ;
    endfor
    ;
    aa=where(data_tc_split.fapar gt 0 and data_tc_split.fapar le 1, counttt)
    print, '1-->', counttt, n_elements(data_tc_split.fapar)

    idx_third=where(index ge 3)
    data_tc_split.nday(idx_third)=index(idx_third)
    ;

    ;window,1, xsize=720, ysize=360, title='FAPAR after more than 3 days'
    ;faparcolor
    ;tv, reverse(congrid(data_tc_split.fapar*250.0, 720, 360),2)
    ;
    ;stop
    ;window,2, xsize=720, ysize=360, title='FLAG after more than 3 days'
    ;loadct,12
    ;tvscl, reverse(congrid(data_tc_split.flag, 720, 360),2)

    ;window,22, xsize=720, ysize=360, title='THE Day'
    ;tvscl, reverse(congrid(data_tc_split.day, 720, 360),2)
    ;stop
    ;==========================================================================================
    ; If only One date
    ;
    ; associated values for the only dates
    ;
    ;
    ;
    idx_one=where(index eq 1 or index_2 eq 1)
    ;
    for t=0, tt(1)-1 do begin
      idx_time = where(data_day_split(t).flag eq 0.0 and data_day_split(t).fapar gt 0.0 and index eq 1 or index_2 eq 1)
      ;
      if idx_time(0) ge 0 then begin
        data_tc_split.red(idx_time)=data_day_split(t).red(idx_time)
        data_tc_split.nir(idx_time)=data_day_split(t).nir(idx_time)
        window,7, xsize=720*2, ysize=360*2, title='line 326'
        ;tv, reverse(congrid(data_tc_split.red*250.0, 720*2, 360*2),2)
        tv, congrid(data_day_split(t).fapar*250.0, 72*2, 360*2)
        data_tc_split.fapar(idx_time)=data_day_split(t).fapar(idx_time)
        data_tc_split.day(idx_time)=t
        data_tc_split.sigma_red(idx_time)= data_day_split(t).sigma_red(idx_time)
        data_tc_split.sigma_nir(idx_time)= data_day_split(t).sigma_nir(idx_time)
        data_tc_split.sigma(idx_time)= data_day_split(t).sigma(idx_time)
      endif
    endfor

    aa=where(data_tc_split.fapar gt 0 and data_tc_split.fapar le 1, counttt)
    print, '2-->', counttt, n_elements(data_tc_split.fapar)

    data_tc_split.nday(idx_one)=1
    data_tc_split.flag(idx_one)=0
    data_tc_split.dev_red_temp(idx_one)=0.
    data_tc_split.dev_nir_temp(idx_one)=0.
    data_tc_split.dev_temp(idx_one)=0.
    ;
    ;faparcolor
    ;window,3, xsize=720, ysize=360, title='FAPAR after more than 3 days and 1 date'
    ;tv, reverse(congrid(data_tc_split.fapar*250.0, 720, 360),2)
    ;loadct,12
    ;window,23, xsize=720, ysize=360, title='THE Day 1'
    ;tvscl, reverse(congrid(data_tc_split.day, 720, 360),2)
    ;stop
    ;==========================================================================================
    ;
    ; If only two dates
    ;
    ; associated values for the only dates
    ;
    idx_two = where(index eq 2 or index_2 eq 2)
    ;
    fapar_two=fltarr(xSplitDim,3600)
    ;
    for t=0, tt(1)-1 do begin
      buf=data_day_split(t).flag
      buf1=data_day_split(t).fapar
      idx_time = where(buf eq 0.0 and buf1 gt 0.0 and index eq 2 or index_2 eq 2)
      if idx_time(0) ge 0 then begin
        idx_lp= where(buf1(idx_time) gt fapar_two(idx_time))
        if idx_lp(0) ge 0 then begin
          fapar_two(idx_time(idx_lp))=buf1(idx_time(idx_lp))
          ;window,7, xsize=720*2, ysize=360*2, title='fapar two'
          ;tv, reverse(congrid(data_tc_split.red*250.0, 720*2, 360*2),2)
          ;tv, congrid(fapar_two*250.0, 72*2, 360*2)
          data_tc_split.fapar(idx_time(idx_lp)) = fapar_two(idx_time(idx_lp))
          data_tc_split.red(idx_time(idx_lp))=data_day_split(t).red(idx_time(idx_lp))
          data_tc_split.nir(idx_time(idx_lp))=data_day_split(t).nir(idx_time(idx_lp))
          data_tc_split.sigma_red(idx_time(idx_lp))= data_day_split(t).sigma_red(idx_time(idx_lp))
          data_tc_split.sigma_nir(idx_time(idx_lp))= data_day_split(t).sigma_nir(idx_time(idx_lp))
          data_tc_split.sigma(idx_time(idx_lp))= data_day_split(t).sigma(idx_time(idx_lp))
          data_tc_split.day(idx_time(idx_lp))=t
        endif
      endif
    endfor

    aa=where(data_tc_split.fapar gt 0 and data_tc_split.fapar le 1, counttt)
    print, '3-->', counttt, n_elements(data_tc_split.fapar)
    ;
    ; compute the deviation ???? ---> do it after the third call ....
    ;
    for t=0, tt(1)-1 do begin
      ;idx_ok=where(data_day_split(t).flag eq 0.0 and data_day_split(t).fapar gt 0.0 and index eq 2 and data_tc_split.day ne t)
      ; MM & NG 22/9/2016
      idx_ok=where(data_day_split(t).flag eq 0.0 and data_day_split(t).fapar gt 0.0 and index eq 2 and index_2 eq 2 and data_tc_split.day ne t)
      if idx_ok(0) ge 0 then begin
        data_tc_split.dev_red_temp(idx_ok)=abs(data_tc_split.red(idx_ok)-data_day_split(t).red(idx_ok))
        data_tc_split.dev_nir_temp(idx_ok)=abs(data_tc_split.nir(idx_ok)-data_day_split(t).nir(idx_ok))
        data_tc_split.dev_temp(idx_ok)=abs(data_tc_split.fapar(idx_ok)-data_day_split(t).fapar(idx_ok))
      endif
    endfor
    ;
    ;
    data_tc_split.nday(idx_two)=2
    data_tc_split.flag(idx_two)=0
    ;
    ;faparcolor
    ;window,5, xsize=720, ysize=360, title='FAPAR after more than 3 days and 1 date and 2 dates'
    ;tv, reverse(congrid(data_tc_split.fapar*250.0, 720, 360),2)
    ;
    ;loadct,12
    ;window,25, xsize=720, ysize=360, title='THE Day 3'
    ;tvscl, reverse(congrid(data_tc_split.day, 720, 360),2)
    ;
    ;stop
    ;==========================================================================================
    ;
    ;
    window,0, xsize=720*2, ysize=360*2, title='TC FAPAR after vegetation'
    faparcolor
    ;tv, reverse(congrid(data_tc_split.fapar*250.0, 720*2, 360*2),2)
    tv, congrid(data_tc_split.fapar*250.0, 720*2, 360*2)
    ;

    window,1, xsize=720*2, ysize=360*2, title='TC RED after vegetation'
    ;tv, reverse(congrid(data_tc_split.red*250.0, 720*2, 360*2),2)
    tv, congrid(data_tc_split.red*250.0, 720*2, 360*2)

    ;loadct,12
    ;window,7, xsize=720, ysize=360, title='Number of Days'
    ;tv, reverse(congrid(data_tc_split.nday*100.0, 720, 360),2)
    ;
    ;window,26, xsize=720, ysize=360, title='THE Day 4'
    ;tvscl, reverse(congrid(data_tc_split.day, 720, 360),2)

    ;plot, data_tc_split.fapar, meandat(2,*,*), psym = 1

    ;print,'Finish vegetation ....'
    ; stop
    ;==========================================================================================
    ; look for bare soil  pixels
    ;
    ; count the number of date where we have valid pixels over vegetation land
    ;
    ;
    indexs=bytarr(xSplitDim,3600)
    indexs(*,*)=0
    one=indexs
    one(*,*)=1
    for t=0, tt(1)-1 do begin
      idx_masks = where(data_day_split(t).fapar eq 0 and $
        data_day_split(t).red(*,*) gt 0.0 and data_day_split(t).red(*,*) lt 1.0 and $
        data_day_split(t).nir(*,*) gt 0.0 and data_day_split(t).nir(*,*) lt 1.0 and index eq 0.0)
      if idx_masks(0) ge 0 then indexs(idx_masks)=indexs(idx_masks)+one(idx_masks)
    endfor
    ;stop
    ;==========================================================================================
    window,4, xsize=720*2, ysize=360*2, title='Number of day over bare soil'
    loadct,12
    ;tv, reverse(congrid(bytscl(indexs,min=0,max=10.),720*2,360*2),2)
    tv, congrid(bytscl(indexs,min=0,max=10.),720*2,360*2)
    ;
    window,5, xsize=720*2, ysize=360*2, title='Number of day over vegetation'
    ;tv, reverse(congrid(bytscl(index,min=0,max=10.),720*2,360*2),2)
    tv, congrid(bytscl(index,min=0,max=10.),720*2,360*2)
    ;
    ;stop
    ;==========================================================================================
    ; More than two dates
    ;
    ; associated values for the number of dates is bigger than 3
    ;
    idx_thirds = where(indexs ge 3)
    ;==========================================================================================
    dims = SIZE(indexs, /DIMENSIONS)
    ind = ARRAY_INDICES(dims, idx_thirds, /DIMENSIONS)
    ;
    sm_make_tc_distance_eu_vegetation_m, daysNumber, data_day_split, idx_thirds, days, meandats, std_means, 2, index_2s, [xSplitDim, ySplitDim]
    ;
    ;
    for t =0 , tt(1) -1 do begin
      ;
      idx_t=where(days eq t)
      ;
      data_tc_split.red(idx_t)= data_day_split(t).red(idx_t)
      data_tc_split.nir(idx_t)= data_day_split(t).nir(idx_t)
      data_tc_split.fapar(idx_t)= data_day_split(t).fapar(idx_t)
      data_tc_split.flag(idx_t)= data_day_split(t).flag(idx_t)
      data_tc_split.day(idx_t) = days(idx_t)
      ;
      data_tc_split.sigma_red(idx_t)= data_day_split(t).sigma_red(idx_t)
      data_tc_split.sigma_nir(idx_t)= data_day_split(t).sigma_nir(idx_t)
      data_tc_split.sigma(idx_t)= data_day_split(t).sigma(idx_t)
      ;
      ;
      ; MM & NG 22/9/2016
      data_tc_split.dev_red_temp(idx_t)= std_means.red[idx_t]
      data_tc_split.dev_nir_temp(idx_t)= std_means.nir[idx_t]
      ;if nfield eq 3 then data_tc_split.dev_temp(idx_t)= std_means.temp[idx_t]
      data_tc_split.dev_temp(idx_t)= std_means.temp[idx_t]
      ;
    endfor
    aa=where(data_tc_split.fapar gt 0 and data_tc_split.fapar le 1, counttt)
    print, '4-->', counttt, n_elements(data_tc_split.fapar)
    ;
    ;
    ;==========================================================================================
    ; If only One date
    ;
    ; associated values for the only dates
    ;
    idx_ones = where(indexs eq 1)
    ;
    for t=0, tt(1)-1 do begin
      ;idx_time = where(data_day_split(t).flag(idx_ones) eq 4.0 or data_day_split(t).flag(idx_ones) eq 5.0)
      ; MM & NG 22/9/2016
      idx_time = where(data_day_split(t).flag(idx_ones) eq 4.0 or data_day_split(t).flag(idx_ones) eq 5.0)
      data_tc_split.red(idx_ones(idx_time))=data_day_split(t).red(idx_ones(idx_time))
      data_tc_split.nir(idx_ones(idx_time))=data_day_split(t).nir(idx_ones(idx_time))
      data_tc_split.fapar(idx_ones(idx_time))=data_day_split(t).fapar(idx_ones(idx_time))
      data_tc_split.day(idx_ones(idx_time))=data_day_split(t).day(idx_ones(idx_time))
    endfor
    aa=where(data_tc_split.fapar gt 0 and data_tc_split.fapar le 1, counttt)
    print, '5-->', counttt, n_elements(data_tc_split.fapar)
    data_tc_split.nday(idx_ones)=1
    data_tc_split.flag(idx_ones)=4
    data_tc_split.dev_red_temp(idx_ones)=0.
    data_tc_split.dev_nir_temp(idx_ones)=0.
    data_tc_split.dev_temp(idx_ones)=0.
    ;
    ;window,2, xsize=720, ysize=360, title='RED after more than 3 days and 1 date'
    ;tv, reverse(congrid(data_tc_split.red*250.0, 720, 360),2)
    ;stop
    ;
    ;==========================================================================================
    ;
    ; If  two dates
    ;
    idx_two = where(indexs eq 2 or index_2s eq 2)
    ;
    nir_two=fltarr(xSplitDim,3600)
    ;
    for t=0, tt(1)-1 do begin
      buf=data_day_split(t).flag
      buf1=data_day_split(t).nir
      ;idx_time = where(buf eq 0.0 and buf1 gt 0.0 and indexs eq 2 or index_2s eq 2)
      ; MM & NG 22/9/2016
      idx_time = where((buf eq 4.0 or buf eq 5.0) and buf1 gt 0.0 and (indexs eq 2 or index_2s eq 2))
      if idx_time(0) ge 0 then begin
        idx_lp= where(buf1(idx_time) gt nir_two(idx_time))
        if idx_lp(0) ge 0 then begin
          nir_two(idx_time(idx_lp))=buf1(idx_time(idx_lp))
          data_tc_split.fapar(idx_time(idx_lp)) = data_day_split(t).fapar(idx_time(idx_lp))
          data_tc_split.red(idx_time(idx_lp))=data_day_split(t).red(idx_time(idx_lp))
          data_tc_split.nir(idx_time(idx_lp))= nir_two(idx_time(idx_lp))
          data_tc_split.sigma_red(idx_time(idx_lp))= data_day_split(t).sigma_red(idx_time(idx_lp))
          data_tc_split.sigma_nir(idx_time(idx_lp))= data_day_split(t).sigma_nir(idx_time(idx_lp))
          data_tc_split.sigma(idx_time(idx_lp))= data_day_split(t).sigma(idx_time(idx_lp))
          data_tc_split.day(idx_time(idx_lp))=t
        endif
      endif
    endfor
    aa=where(data_tc_split.fapar gt 0 and data_tc_split.fapar le 1, counttt)
    print, '6-->', counttt, n_elements(data_tc_split.fapar)
    ;
    ; compute the deviation ???? ---> do it after the third call ....
    ;
    for t=0, tt(1)-1 do begin
      ;idx_ok=where(data_day_split(t).flag eq 4.0 and data_day_split(t).fapar eq 0.0 and indexs eq 2 and data_tc_split.day ne t)
      ; MM & NG 22/9/2016
      ; fapar eq 0???
      idx_ok=where((data_day_split(t).flag eq 4.0 or data_day_split(t).flag eq 5.0) and (data_day_split(t).fapar ne 0.0) and (indexs eq 2 or index_2s eq 2) and data_tc_split.day ne t)
      if idx_ok(0) ge 0 then begin
        data_tc_split.dev_red_temp(idx_ok)=abs(data_tc_split.red(idx_ok)-data_day_split(t).red(idx_ok))
        data_tc_split.dev_nir_temp(idx_ok)=abs(data_tc_split.nir(idx_ok)-data_day_split(t).nir(idx_ok))
        data_tc_split.dev_temp(idx_ok)=abs(data_tc_split.fapar(idx_ok)-data_day_split(t).fapar(idx_ok))
      endif
    endfor
    ;
    ;
    data_tc_split.nday(idx_two)=2
    data_tc_split.flag(idx_two)=4
    print, 'compute slice...', slice+1, '/', nSlice
    data_tc.nday[subXStart:subXEnd, subYStart:subYEnd]=data_tc_split.nday[*,*]
    data_tc.day[subXStart:subXEnd, subYStart:subYEnd]=data_tc_split.day[*,*]
    data_tc.dev_red_temp[subXStart:subXEnd, subYStart:subYEnd]=data_tc_split.dev_red_temp[*,*]
    data_tc.dev_nir_temp[subXStart:subXEnd, subYStart:subYEnd]=data_tc_split.dev_nir_temp[*,*]
    data_tc.sigma_red[subXStart:subXEnd, subYStart:subYEnd]=data_tc_split.sigma_red[*,*]
    data_tc.sigma_nir[subXStart:subXEnd, subYStart:subYEnd]=data_tc_split.sigma_nir[*,*]
    data_tc.flag[subXStart:subXEnd, subYStart:subYEnd]=data_tc_split.flag[*,*]
    data_tc.fapar[subXStart:subXEnd, subYStart:subYEnd]=data_tc_split.fapar[*,*]
    data_tc.nir[subXStart:subXEnd, subYStart:subYEnd]=data_tc_split.nir[*,*]
    data_tc.red[subXStart:subXEnd, subYStart:subYEnd]=data_tc_split.red[*,*]
  endfor
  ;
  ;===================================================================================================
  ;
  ;
  window,2, xsize=720*2, ysize=360*2, title='TC FAPAR'
  faparcolor
  ;tv, reverse(congrid(data_tc_split.fapar*250.0, 720*2, 360*2),2)
  tv, congrid(data_tc.fapar*250.0, 720*2, 360*2)
  ;
  window,3, xsize=720*2, ysize=360*2, title='TC RED'
  ;tv, reverse(congrid(data_tc_split.red*250.0, 720*2, 360*2),2)
  tv, congrid(data_tc.red*250.0, 720*2, 360*2)
  ;stop
end
;========================================================================================================
